# This workflow will build a .NET project
name: .NET

on:
  push:
  pull_request:
    branches: [ "main" ]
jobs:
  build_InM:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore -c R.InM
    - name: Test
      run: dotnet test -c R.InM --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:ExcludeByFile="**/*.Api/Program.cs"
    - name: Upload coverage reports to Codecov
      if: github.event_name == 'push'
      shell: bash
      run: |
        curl -Os https://uploader.codecov.io/latest/linux/codecov 
        chmod +x codecov
        ref="${{ github.ref }}"
        branch=${ref#refs/heads/}
        echo $branch
        ./codecov -b $branch -f ./tests/KiwiLoad.Api.Tests/coverage.opencover.xml -t ${{ secrets.CODECOV_TOKEN }}
  build_SqlS:
    runs-on: ubuntu-latest
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: "Y"
          MSSQL_SA_PASSWORD: Password123
          MSSQL_PID: Express
        ports:
          - 1433:1433
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Install PowerShell (if not already available)
      run: |
        if (! [ -x "$(command -v pwsh)" ])
          curl -sSL https://aka.ms/install-powershell | pwsh -ExecutionPolicy Bypass -NoProfile -InputFormat None
    - name: Test SQL Server Connection (using PowerShell)
      run: |
        $server = 'localhost'
        $database = 'master'
        $username = 'sa'
        $password = 'Password123'
        try {
          Test-Connection -ComputerName $server -Credential (New-Object System.Management.Automation.PSCredential ($username, (ConvertTo-SecureString $password -AsPlainText -Force))) -Force
          Write-Host "Connection to SQL Server successful!"
        }
        catch {
          Write-Error "Connection to SQL Server failed: $($_.Exception.Message)"
          exit 1
        }
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore -c R.SqlS
    - name: Test
      run: dotnet test --no-build -c R.SqlS
